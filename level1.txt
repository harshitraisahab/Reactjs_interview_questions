### 1. What is React?

**Question 1:** What is React?

**Answer:** React is a JavaScript library for building user interfaces, developed and maintained by Facebook. It allows developers to build reusable UI components that update efficiently and automatically manage the DOM (Document Object Model) to enhance application performance.

**Question 2:** What are the key features of React?

**Answer:** 
- **Components:** React applications are built using components, which are self-contained, reusable pieces of code.
- **Virtual DOM:** React uses a virtual DOM to efficiently update and render changes to the actual DOM.
- **Declarative Syntax:** React uses a declarative syntax, making it more predictable and easier to understand.
- **One-way Data Binding:** Data flows in a unidirectional manner, making it easier to trace and manage.

### 2. Working of DOM

**Question 3:** Explain the working of the DOM (Document Object Model).

**Answer:** The DOM is a programming interface for web documents. When a web page is loaded, the browser creates a DOM representation of the HTML. It forms a tree-like structure where each element is a node. JavaScript can manipulate the DOM, updating its structure and content dynamically, which then reflects changes on the web page.

**Question 4:** How does the virtual DOM work in React?

**Answer:** React's virtual DOM is a lightweight copy of the real DOM. When changes occur in a React application, React first updates the virtual DOM. It then compares the virtual DOM with the real DOM and calculates the most efficient way to update the actual DOM. This process minimizes direct manipulation of the real DOM, improving performance.

### 3. Problems with JS

**Question 5:** What are some common problems with traditional JavaScript development?

**Answer:** 
- **Global Scope:** Variables declared globally can lead to naming conflicts and unintended side effects.
- **Callback Hell:** Nested callbacks can make code hard to read and maintain.
- **Lack of Structure:** Without a clear structure, managing larger applications becomes challenging.
- **Inefficient DOM Manipulation:** Direct manipulation of the DOM can be inefficient, especially for frequent updates.

**Question 6:** How does React address the issues with traditional JavaScript?

**Answer:** React addresses these issues by introducing a component-based architecture, a virtual DOM for efficient updates, and a declarative syntax that provides a clearer and more structured way to build applications.

### 4. Working of React

**Question 7:** Explain the lifecycle methods in a React component.

**Answer:** React components go through various lifecycle phases, including mounting, updating, and unmounting. Key methods include `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`, allowing developers to execute code at specific points in a component's lifecycle.

**Question 8:** How does React handle state management?

**Answer:** React components have a `state` object that represents the current state of the component. When the state changes, React efficiently updates only the components affected by the change, ensuring a smooth and performant user interface.

### 5. JS Vs React

**Question 9:** What are the key differences between JavaScript and React?

**Answer:**
- **JavaScript:** A programming language used for general-purpose scripting. 
- **React:** A JavaScript library for building user interfaces, specifically focused on UI components and their interactions.

**Question 10:** How does React differ from other JavaScript frameworks?

**Answer:** React focuses on building UI components and efficiently updating the DOM, while some frameworks, like Angular, provide a more comprehensive solution, including features for data binding, dependency injection, and more.

### 6. Intro to Components

**Question 11:** What is a React component?

**Answer:** A React component is a reusable, self-contained piece of code that encapsulates a specific piece of UI functionality. Components can be composed to build complex user interfaces.

**Question 12:** How do you create a functional component in React?

**Answer:** 
```jsx
// Functional Component
import React from 'react';

const MyComponent = () => {
  return <div>Hello, I'm a functional component!</div>;
};
```

**Question 13:** What is a class component in React?

**Answer:** A class component in React is a JavaScript class that extends `React.Component`. It can hold and manage local state and has access to lifecycle methods.

**Question 14:** What is the significance of the `render` method in a React component?

**Answer:** The `render` method defines what should be displayed on the UI. It returns React elements that represent the structure of the component.

**Question 15:** How do you pass data from a parent component to a child component in React?

**Answer:** Data can be passed from a parent to a child component through props. Here's an example:

```jsx
// Parent Component
import React from 'react';
import ChildComponent from './ChildComponent';

const Parent = () => {
  const data = "Hello from Parent!";
  return <ChildComponent message={data} />;
};

// Child Component
const ChildComponent = ({ message }) => {
  return <p>{message}</p>;
};
```

**Question 16:** Explain the concept of state in a React component.

**Answer:** State is a JavaScript object used to represent the current condition of a component. It can be modified using the `setState` method, triggering a re-render and updating the UI.

**Question 17:** Differentiate between props and state in React.

**Answer:**
- **Props:** Immutable, passed from parent to child. Used for communication between components.
- **State:** Mutable, managed internally within a component. Used for managing component-specific data.

**Question 18:** How can you handle events in React?

**Answer:** Events in React are handled by providing a callback function. For example:

```jsx
// Event Handling
import React, { useState } from 'react';

const MyComponent = () => {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={handleClick}>Increment</button>
    </div>
  );
};
```

**Question 19:** What is conditional rendering in React?

**Answer:** Conditional rendering involves displaying different components or content based on certain conditions or states within a React component.

**Question 20:** How does React help with code reusability?

**Answer:** React promotes code reusability through the use of components. Components can be reused across different parts of an application, improving maintainability and reducing redundancy.