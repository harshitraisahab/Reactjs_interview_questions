
1. **Explain what React is and its key features.**
   - React is a JavaScript library for building user interfaces.
   - Key features include a virtual DOM for efficient updates, component-based architecture, and a declarative approach to building UIs.

2. **What is JSX in React, and why is it used?**
   - JSX is a syntax extension for JavaScript used with React.
   - It allows writing HTML-like code in JavaScript, making it more readable and expressive.

3. **Differentiate between functional components and class components in React.**
   - Functional components are simple functions returning UI elements.
   - Class components are ES6 classes extending `React.Component` and can manage state and lifecycle methods.

4. **What is the significance of state in React? How do you manage state in a functional component?**
   - State holds data that can change over time, and React components can rerender based on state changes.
   - In functional components, state is managed using the `useState` hook.

5. **Describe the lifecycle methods of a class component in React.**
   - Mounting: `constructor`, `render`, `componentDidMount`.
   - Updating: `render`, `componentDidUpdate`.
   - Unmounting: `componentWillUnmount`.

6. **What is the purpose of `setState` in React, and why should it be used instead of modifying state directly?**
   - `setState` is used to update component state.
   - It ensures proper asynchronous state updates and triggers a re-render.

7. **Explain the concept of props in React.**
   - Props (short for properties) are inputs to React components.
   - They allow the passing of data from a parent to a child component.

8. **How does data flow in React?**
   - Data flows unidirectionally in React, from parent to child components through props.

9. **What is the virtual DOM, and how does it contribute to the performance of React applications?**
   - The virtual DOM is a lightweight copy of the actual DOM.
   - React uses it to minimize direct manipulation of the actual DOM, improving performance by batching and efficiently updating changes.

10. **What are React hooks, and why were they introduced in React 16.8? Provide examples of commonly used hooks.**
    - React hooks are functions that allow functional components to have state and lifecycle features.
    - Examples include `useState`, `useEffect`, and `useContext`.

11. **What is the significance of the `key` prop in React?**
    - The `key` prop helps React identify which items have changed, added, or removed in a list, aiding in efficient rendering and updating.

12. **How does conditional rendering work in React? Provide examples.**
    - Conditional rendering involves using `if` statements or ternary operators to decide what to render.
    - Example: `{condition ? <ComponentA /> : <ComponentB />}`.

13. **What is React Router, and how is it used for navigation in a React application?**
    - React Router is a library for handling navigation in React applications.
    - It provides components like `BrowserRouter` and `Link` for creating navigational components.

14. **Explain the purpose of the `map` function in the context of React components.**
    - The `map` function is used to iterate over an array and create a new array of React elements based on the original array.

15. **What are higher-order components (HOCs) in React, and why might you use them?**
    - HOCs are functions that take a component and return a new component with enhanced functionality.
    - They are used for code reuse, logic abstraction, and prop manipulation.

16. **What is the role of the `shouldComponentUpdate` method, and when would you use it?**
    - `shouldComponentUpdate` allows developers to optimize rendering by preventing unnecessary re-renders.
    - It returns a boolean indicating whether the component should update.

17. **Explain the concept of controlled components in React forms.**
    - Controlled components have their state controlled by React, typically using state and callbacks to manage form input values.

18. **What is the Context API in React, and when would you use it?**
    - The Context API provides a way to share values (like themes or user authentication) across the component tree without prop drilling.
    - It is useful when many components need the same data.

19. **How does error handling work in React applications?**
    - React components can use error boundaries to catch JavaScript errors anywhere in their component tree.
    - Error boundaries are components with a special lifecycle method called `componentDidCatch`.

20. **What are React fragments, and why are they useful?**
    - React fragments are used to group multiple children without adding extra nodes to the DOM.
    - They improve code readability and structure without affecting the layout.